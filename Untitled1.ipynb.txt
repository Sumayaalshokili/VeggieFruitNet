{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vNs6yiYkyQwY",
        "outputId": "fdb5f737-83d4-4d71-ea71-03f68076e36e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Define the path to the ZIP file\n",
        "zip_path = '/content/drive/MyDrive/FOOD.zip'\n",
        "\n",
        "# Define the path where the ZIP file will be extracted\n",
        "extract_path = '/content/FOOD'\n",
        "\n",
        "# Check if the ZIP file exists\n",
        "if os.path.exists(zip_path):\n",
        "    print(\"FOOD.zip exists. Ready for extraction.\")\n",
        "else:\n",
        "    print(\"FOOD.zip does not exist. Please verify the path.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BayRusJbyWww",
        "outputId": "736e2662-7148-48be-d5e8-8ceb2dde7d15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FOOD.zip exists. Ready for extraction.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "\n",
        "# Extract the contents of the ZIP file\n",
        "if os.path.exists(zip_path):\n",
        "    print(\"Extracting FOOD.zip...\")\n",
        "    with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(extract_path)\n",
        "    print(\"Extraction complete.\")\n",
        "else:\n",
        "    print(\"ZIP file not found. Please check the path again.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TV1qdgkOyatG",
        "outputId": "dcf4600f-7584-4132-be65-7f7db354b328"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting FOOD.zip...\n",
            "Extraction complete.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List the contents of the extracted folder\n",
        "!ls /content/FOOD"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k9xVFRqCyjsG",
        "outputId": "cf525a12-b4f8-47af-c783-6543605dcef9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test  train\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define training and testing directories\n",
        "train_dir = '/content/FOOD/train'\n",
        "test_dir = '/content/FOOD/test'\n",
        "\n",
        "# Verify the contents of these directories\n",
        "print(\"Contents of training directory:\")\n",
        "!ls /content/FOOD/train\n",
        "\n",
        "print(\"\\nContents of testing directory:\")\n",
        "!ls /content/FOOD/test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2k34yRTEynTM",
        "outputId": "3e1cc959-69d9-48a3-8ec8-2c4f009d915b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Contents of training directory:\n",
            " apple\t  beetroot\t cabbage    carrot\t 'chilli pepper'   cucumber   garlic\n",
            " banana  'bell pepper'\t capsicum   cauliflower   corn\t\t   eggplant   ginger\n",
            "\n",
            "Contents of testing directory:\n",
            " apple\t  beetroot\t cabbage    carrot\t 'chilli pepper'   cucumber   garlic\n",
            " banana  'bell pepper'\t capsicum   cauliflower   corn\t\t   eggplant   ginger\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# Count the number of images in each class for training and testing sets\n",
        "print(\"Number of images in each class (training set):\")\n",
        "for category in os.listdir(train_dir):\n",
        "    category_path = os.path.join(train_dir, category)\n",
        "    if os.path.isdir(category_path):\n",
        "        print(f\"{category}: {len(os.listdir(category_path))}\")\n",
        "\n",
        "print(\"\\nNumber of images in each class (testing set):\")\n",
        "for category in os.listdir(test_dir):\n",
        "    category_path = os.path.join(test_dir, category)\n",
        "    if os.path.isdir(category_path):\n",
        "        print(f\"{category}: {len(os.listdir(category_path))}\")"
      ],
      "metadata": {
        "id": "4meD4Xw1yyi_",
        "outputId": "4ab06c40-f597-4d3f-d81c-68059e09b808",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of images in each class (training set):\n",
            "chilli pepper: 87\n",
            "cucumber: 94\n",
            "banana: 75\n",
            "cabbage: 92\n",
            "capsicum: 89\n",
            "ginger: 68\n",
            "beetroot: 88\n",
            "garlic: 92\n",
            "corn: 87\n",
            "eggplant: 84\n",
            "cauliflower: 79\n",
            "carrot: 82\n",
            "apple: 68\n",
            "bell pepper: 90\n",
            "\n",
            "Number of images in each class (testing set):\n",
            "chilli pepper: 10\n",
            "cucumber: 10\n",
            "banana: 9\n",
            "cabbage: 10\n",
            "capsicum: 10\n",
            "ginger: 10\n",
            "beetroot: 10\n",
            "garlic: 10\n",
            "corn: 10\n",
            "eggplant: 10\n",
            "cauliflower: 10\n",
            "carrot: 10\n",
            "apple: 10\n",
            "bell pepper: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Create ImageDataGenerator objects\n",
        "train_datagen = ImageDataGenerator(\n",
        "    rescale=1./255,\n",
        "    validation_split=0.2  # 20% for validation\n",
        ")\n",
        "\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)  # Fixed indentation\n",
        "\n",
        "# Load training data\n",
        "train_data = train_datagen.flow_from_directory(\n",
        "    train_dir,\n",
        "    target_size=(128, 128),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    subset='training'\n",
        ")\n",
        "\n",
        "# Load validation data\n",
        "validation_data = train_datagen.flow_from_directory(\n",
        "    train_dir,\n",
        "    target_size=(128, 128),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    subset='validation'\n",
        ")\n",
        "\n",
        "# Load test data\n",
        "test_data = test_datagen.flow_from_directory(\n",
        "    test_dir,\n",
        "    target_size=(128, 128),\n",
        "    batch_size=32,\n",
        "    class_mode='binary'\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vF_TDxip8RTO",
        "outputId": "e1e26412-c06c-4582-eee6-dfde8fe3008b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 947 images belonging to 14 classes.\n",
            "Found 228 images belonging to 14 classes.\n",
            "Found 139 images belonging to 14 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n",
        "\n",
        "# Initialize the model\n",
        "model = Sequential()\n",
        "\n",
        "# Layer 1\n",
        "model.add(Conv2D(32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=(128, 128, 3)))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "\n",
        "# Layer 2\n",
        "model.add(Conv2D(64, kernel_size=(3, 3), padding='same', activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "\n",
        "# Layer 3\n",
        "model.add(Conv2D(128, kernel_size=(3, 3), padding='same', activation='relu'))\n",
        "model.add(BatchNormalization())\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "\n",
        "# Flatten Layer\n",
        "model.add(Flatten())\n",
        "\n",
        "# Dense Layers\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Dense(1, activation='sigmoid'))  # For binary classification"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rEr8sW_38c7N",
        "outputId": "e95ca45d-8035-4c3a-9ee6-bd15dff1050f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Display the model summary\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 771
        },
        "id": "ULpY9Pv78j0h",
        "outputId": "c9c7870d-60ff-4c5b-d740-b958127de269"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_2\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_6 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │             \u001b[38;5;34m896\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_6                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m32\u001b[0m)        │             \u001b[38;5;34m128\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_6 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_7 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_7                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │             \u001b[38;5;34m256\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_7 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_8 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │          \u001b[38;5;34m73,856\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │             \u001b[38;5;34m512\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_8 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32768\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m4,194,432\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_8 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m65\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">896</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_6                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_7                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32768</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">4,194,432</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,296,897\u001b[0m (16.39 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,296,897</span> (16.39 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,296,449\u001b[0m (16.39 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,296,449</span> (16.39 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m448\u001b[0m (1.75 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> (1.75 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "history = model.fit(\n",
        "    train_data,\n",
        "        epochs=20,  # Number of epochs\n",
        "            validation_data=validation_data\n",
        "            )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "174pbV1q8rcK",
        "outputId": "3625d58b-19f8-4e68-8479-6b1054f2d5dd"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/PIL/Image.py:1045: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m96s\u001b[0m 3s/step - accuracy: 0.0643 - loss: -5539.9370 - val_accuracy: 0.0789 - val_loss: -482.9338\n",
            "Epoch 2/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 3s/step - accuracy: 0.0597 - loss: -120588.4453 - val_accuracy: 0.0658 - val_loss: -61151.6641\n",
            "Epoch 3/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m140s\u001b[0m 3s/step - accuracy: 0.0715 - loss: -717690.4375 - val_accuracy: 0.0658 - val_loss: -495319.5938\n",
            "Epoch 4/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 3s/step - accuracy: 0.0611 - loss: -2465974.0000 - val_accuracy: 0.0658 - val_loss: -1690691.0000\n",
            "Epoch 5/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m92s\u001b[0m 3s/step - accuracy: 0.0739 - loss: -6450831.0000 - val_accuracy: 0.0658 - val_loss: -5057718.0000\n",
            "Epoch 6/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m86s\u001b[0m 3s/step - accuracy: 0.0678 - loss: -14825220.0000 - val_accuracy: 0.0658 - val_loss: -10484030.0000\n",
            "Epoch 7/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 3s/step - accuracy: 0.0581 - loss: -29661484.0000 - val_accuracy: 0.0658 - val_loss: -19729206.0000\n",
            "Epoch 8/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 3s/step - accuracy: 0.0538 - loss: -51811096.0000 - val_accuracy: 0.0658 - val_loss: -32660740.0000\n",
            "Epoch 9/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m94s\u001b[0m 3s/step - accuracy: 0.0616 - loss: -85931640.0000 - val_accuracy: 0.0658 - val_loss: -67047084.0000\n",
            "Epoch 10/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m135s\u001b[0m 3s/step - accuracy: 0.0714 - loss: -134058576.0000 - val_accuracy: 0.0658 - val_loss: -121366160.0000\n",
            "Epoch 11/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 3s/step - accuracy: 0.0694 - loss: -203360144.0000 - val_accuracy: 0.0658 - val_loss: -182659248.0000\n",
            "Epoch 12/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 3s/step - accuracy: 0.0573 - loss: -299385248.0000 - val_accuracy: 0.0658 - val_loss: -226733088.0000\n",
            "Epoch 13/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 3s/step - accuracy: 0.0665 - loss: -423906656.0000 - val_accuracy: 0.0658 - val_loss: -352934272.0000\n",
            "Epoch 14/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 3s/step - accuracy: 0.0546 - loss: -575870336.0000 - val_accuracy: 0.0658 - val_loss: -527547904.0000\n",
            "Epoch 15/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m88s\u001b[0m 3s/step - accuracy: 0.0580 - loss: -769211776.0000 - val_accuracy: 0.0658 - val_loss: -670991424.0000\n",
            "Epoch 16/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m89s\u001b[0m 3s/step - accuracy: 0.0486 - loss: -1025855808.0000 - val_accuracy: 0.0658 - val_loss: -902640832.0000\n",
            "Epoch 17/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m88s\u001b[0m 3s/step - accuracy: 0.0589 - loss: -1373615744.0000 - val_accuracy: 0.0658 - val_loss: -1057413248.0000\n",
            "Epoch 18/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 3s/step - accuracy: 0.0725 - loss: -1582773888.0000 - val_accuracy: 0.0658 - val_loss: -1413875328.0000\n",
            "Epoch 19/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m139s\u001b[0m 3s/step - accuracy: 0.0609 - loss: -1973213952.0000 - val_accuracy: 0.0658 - val_loss: -2443327488.0000\n",
            "Epoch 20/20\n",
            "\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m90s\u001b[0m 3s/step - accuracy: 0.0646 - loss: -2460550144.0000 - val_accuracy: 0.0658 - val_loss: -2443249152.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot training and validation accuracy\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Plot training and validation loss\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Model Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "4dalR8fcFi7i",
        "outputId": "317c72a6-0a8d-4cf7-92f3-e8c7510c0f9e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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8zLf2+12Mzg42JwyZUrmutjYWNPd3d386quvrthPfn/vi8O/jzU7GzduNAHzyJEjV2yT39+F4pLd8Q4bNszs27dvvvopK99t3759zZtuuinHNqXlu3UWjQgVgrS0NP7880+6dOmSuc5isdClSxfWrVuX7Tbr1q3L0h6gW7duV2xfksXFxQFQsWLFHNslJCRQo0YNwsLC6Nu3L7t27SqK8q7avn37CA0NpXbt2gwZMoSoqKgrti1L32taWhqff/459957b44PIC6t3+s/HTp0iOjo6Czfnb+/P61bt77id1eQ3/uSKi4uDsMwCAgIyLFdfn4XSppVq1ZRpUoVGjRowKhRozh79uwV25aV7zYmJoZFixYxYsSIXNuW5u82vxSECsGZM2ew2WwEBQVlWR8UFER0dHS220RHR+erfUllt9sZN24cN9xwA02aNLliuwYNGvDJJ5/www8/8Pnnn2O322nbti3Hjh0rwmrzr3Xr1syaNYslS5YwY8YMDh06RLt27bhw4UK27cvK9wowf/58YmNjGT58+BXblNbv9d8ufT/5+e4K8ntfEqWkpPDUU08xePDgHB/Imd/fhZKke/fuzJ49mxUrVvD666+zevVqevTogc1my7Z9WfluP/30U3x9fbnttttybFeav9uC0NPnxalGjx7Nzp07cz2f3KZNG9q0aZP5vm3btjRs2JAPP/yQl156qbDLLLAePXpkvm7WrBmtW7emRo0afPPNN3n6v6zS7P/+7//o0aMHoaGhV2xTWr9XcUhPT2fQoEGYpsmMGTNybFuafxfuuOOOzNdNmzalWbNm1KlTh1WrVtG5c+dirKxwffLJJwwZMiTXCxhK83dbEBoRKgSVK1fGarUSExOTZX1MTAzBwcHZbhMcHJyv9iXRmDFjWLhwIStXrqRatWr52tbV1ZUWLVqwf//+QqqucAQEBFC/fv0r1l0WvleAI0eOsHz5cu677758bVdav9dL309+vruC/N6XJJdC0JEjR1i2bFmOo0HZye13oSSrXbs2lStXvmLtpf27BVizZg2RkZH5/h2G0v3d5oWCUCFwc3OjZcuWrFixInOd3W5nxYoVWf5v+Z/atGmTpT3AsmXLrti+JDFNkzFjxjBv3jx++eUXatWqle8+bDYbO3bsICQkpBAqLDwJCQkcOHDginWX5u/1n2bOnEmVKlXo1atXvrYrrd9rrVq1CA4OzvLdxcfHs2HDhit+dwX5vS8pLoWgffv2sXz5cipVqpTvPnL7XSjJjh07xtmzZ69Ye2n+bi/5v//7P1q2bElERES+ty3N322eFPds7bJqzpw5pru7uzlr1ixz9+7d5gMPPGAGBASY0dHRpmma5t13320+/fTTme3Xrl1ruri4mG+++aa5Z88ec8KECaarq6u5Y8eO4jqEPBs1apTp7+9vrlq1yjx58mTmkpSUlNnm38c7adIkc+nSpeaBAwfMP//807zjjjtMDw8Pc9euXcVxCHn22GOPmatWrTIPHTpkrl271uzSpYtZuXJl89SpU6Zplq3v9RKbzWZWr17dfOqppy77rDR/rxcuXDC3bNlibtmyxQTMt99+29yyZUvmlVKvvfaaGRAQYP7www/m9u3bzb59+5q1atUyk5OTM/u46aabzGnTpmW+z+33vrjkdKxpaWlmnz59zGrVqplbt27N8jucmpqa2ce/jzW334XilNPxXrhwwXz88cfNdevWmYcOHTKXL19uXnPNNWa9evXMlJSUzD7Kwnd7SVxcnOnl5WXOmDEj2z5K03dbGBSECtG0adPM6tWrm25ubmarVq3M9evXZ37WoUMHc9iwYVnaf/PNN2b9+vVNNzc3s3HjxuaiRYuKuOKCAbJdZs6cmdnm38c7bty4zD+boKAgs2fPnubmzZuLvvh8uv32282QkBDTzc3NrFq1qnn77beb+/fvz/y8LH2vlyxdutQEzMjIyMs+K83f68qVK7P9e3vpeOx2u/n888+bQUFBpru7u9m5c+fL/gxq1KhhTpgwIcu6nH7vi0tOx3ro0KEr/g6vXLkys49/H2tuvwvFKafjTUpKMrt27WoGBgaarq6uZo0aNcz777//skBTFr7bSz788EPT09PTjI2NzbaP0vTdFgbDNE2zUIecREREREoozRESERGRcktBSERERMotBSEREREptxSEREREpNxSEBIREZFyS0FIREREyi0FIRERESm3FIRERHJhGAbz588v7jJEpBAoCIlIiTZ8+HAMw7hs6d69e3GXJiJlgEtxFyAikpvu3bszc+bMLOvc3d2LqRoRKUs0IiQiJZ67uzvBwcFZlgoVKgCO01YzZsygR48eeHp6Urt2bb799tss2+/YsYObbroJT09PKlWqxAMPPEBCQkKWNp988gmNGzfG3d2dkJAQxowZk+XzM2fOcOutt+Ll5UW9evVYsGBB5mfnz59nyJAhBAYG4unpSb169S4LbiJSMikIiUip9/zzz9O/f3+2bdvGkCFDuOOOO9izZw8AiYmJdOvWjQoVKrBp0ybmzp3L8uXLswSdGTNmMHr0aB544AF27NjBggULqFu3bpZ9TJo0iUGDBrF9+3Z69uzJkCFDOHfuXOb+d+/ezU8//cSePXuYMWMGlStXLro/ABEpuOJ+6quISE6GDRtmWq1W09vbO8vyyiuvmKZpmoA5cuTILNu0bt3aHDVqlGmapvnRRx+ZFSpUMBMSEjI/X7RokWmxWDKfOB4aGmo+++yzV6wBMJ977rnM9wkJCSZg/vTTT6Zpmmbv3r3Ne+65xzkHLCJFSnOERKTE69SpEzNmzMiyrmLFipmv27Rpk+WzNm3asHXrVgD27NlDREQE3t7emZ/fcMMN2O12IiMjMQyDEydO0Llz5xxraNasWeZrb29v/Pz8OHXqFACjRo2if//+bN68ma5du9KvXz/atm1boGMVkaKlICQiJZ63t/dlp6qcxdPTM0/tXF1ds7w3DAO73Q5Ajx49OHLkCIsXL2bZsmV07tyZ0aNH8+abbzq9XhFxLs0REpFSb/369Ze9b9iwIQANGzZk27ZtJCYmZn6+du1aLBYLDRo0wNfXl5o1a7JixYqrqiEwMJBhw4bx+eefM3XqVD766KOr6k9EioZGhESkxEtNTSU6OjrLOhcXl8wJyXPnzuXaa6/lxhtv5IsvvmDjxo383//9HwBDhgxhwoQJDBs2jIkTJ3L69GnGjh3L3XffTVBQEAATJ05k5MiRVKlShR49enDhwgXWrl3L2LFj81TfCy+8QMuWLWncuDGpqaksXLgwM4iJSMmmICQiJd6SJUsICQnJsq5Bgwbs3bsXcFzRNWfOHB588EFCQkL46quvaNSoEQBeXl4sXbqUhx9+mOuuuw4vLy/69+/P22+/ndnXsGHDSElJ4Z133uHxxx+ncuXKDBgwIM/1ubm5MX78eA4fPoynpyft2rVjzpw5TjhyESlshmmaZnEXISJSUIZhMG/ePPr161fcpYhIKaQ5QiIiIlJuKQiJiIhIuaU5QiJSqunsvohcDY0IiYiISLmlICQiIiLlloKQiIiIlFsKQiIiIlJuKQiJiIhIuaUgJCIiIuWWgpCIiIiUWwpCIiIiUm4pCImIiEi59f96v8y2jW4Q8QAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model on test data\n",
        "test_loss, test_accuracy = model.evaluate(test_data)\n",
        "print(f\"Test Loss: {test_loss}\")\n",
        "print(f\"Test Accuracy: {test_accuracy}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kJwt3LimFsVJ",
        "outputId": "8ed9943c-f71c-4e5b-fcaa-99b681b0b8d2"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 1s/step - accuracy: 0.0663 - loss: -2514899968.0000\n",
            "Test Loss: -2472442368.0\n",
            "Test Accuracy: 0.06474819779396057\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the test data\n",
        "predictions = model.predict(test_data)\n",
        "\n",
        "# Convert probabilities to binary predictions\n",
        "predicted_labels = (predictions > 0.5).astype(int)\n",
        "\n",
        "# Display predictions\n",
        "print(predicted_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EiFTwbeOF1eA",
        "outputId": "ca554b6a-f243-4f84-cf5a-69c9688ef6ed"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m5/5\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 3s/step\n",
            "[[1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "\n",
        "# True labels\n",
        "true_labels = test_data.classes\n",
        "\n",
        "# Confusion matrix\n",
        "cm = confusion_matrix(true_labels, predicted_labels)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm)\n",
        "\n",
        "# Classification report\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(true_labels, predicted_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rRMo1VTFGPw2",
        "outputId": "94241af8-3fde-4d98-f354-4a862f404fa5"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0  9  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]\n",
            " [ 0 10  0  0  0  0  0  0  0  0  0  0  0  0]]\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00        10\n",
            "           1       0.06      1.00      0.12         9\n",
            "           2       0.00      0.00      0.00        10\n",
            "           3       0.00      0.00      0.00        10\n",
            "           4       0.00      0.00      0.00        10\n",
            "           5       0.00      0.00      0.00        10\n",
            "           6       0.00      0.00      0.00        10\n",
            "           7       0.00      0.00      0.00        10\n",
            "           8       0.00      0.00      0.00        10\n",
            "           9       0.00      0.00      0.00        10\n",
            "          10       0.00      0.00      0.00        10\n",
            "          11       0.00      0.00      0.00        10\n",
            "          12       0.00      0.00      0.00        10\n",
            "          13       0.00      0.00      0.00        10\n",
            "\n",
            "    accuracy                           0.06       139\n",
            "   macro avg       0.00      0.07      0.01       139\n",
            "weighted avg       0.00      0.06      0.01       139\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    }
  ]
}